{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.25.53.49325",
      "templateHash": "13127300503667523580"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]",
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "name": {
      "type": "string",
      "defaultValue": "azure-cleaner",
      "metadata": {
        "description": "Name of all resources."
      }
    },
    "dockerImageTag": {
      "type": "string",
      "defaultValue": "#{DOCKER_IMAGE_TAG}#",
      "metadata": {
        "description": "Tag of the docker image."
      }
    },
    "notificationsPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Notifications password."
      }
    },
    "azureDevOpsProjectUrl": {
      "type": "string",
      "metadata": {
        "description": "URL of the project. For example \"https://dev.azure.com/fabrikam/DefaultCollection\""
      }
    },
    "azureDevOpsProjectToken": {
      "type": "securestring",
      "metadata": {
        "description": "Token for accessing the project."
      }
    },
    "eventBusTransport": {
      "type": "string",
      "defaultValue": "ServiceBus",
      "allowedValues": [
        "ServiceBus",
        "QueueStorage"
      ],
      "metadata": {
        "description": "Merge strategy to use when setting auto complete on created pull requests."
      }
    },
    "logAnalyticsWorkspaceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource identifier of the LogAnalytics Workspace to use. If none is provided, a new one is created."
      }
    },
    "appEnvironmentId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Resource identifier of the ContainerApp Environment to deploy to. If none is provided, a new one is created."
      }
    }
  },
  "variables": {
    "hasProvidedLogAnalyticsWorkspace": "[and(not(equals(parameters('logAnalyticsWorkspaceId'), null())), not(empty(parameters('logAnalyticsWorkspaceId'))))]",
    "hasProvidedAppEnvironment": "[and(not(equals(parameters('appEnvironmentId'), null())), not(empty(parameters('appEnvironmentId'))))]",
    "collisionSuffix": "[substring(uniqueString(resourceGroup().id), 0, sub(sub(24, length(parameters('name'))), 1))]"
  },
  "resources": [
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}-{1}', parameters('name'), variables('collisionSuffix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "tenantId": "[subscription().tenantId]",
        "sku": {
          "name": "standard",
          "family": "A"
        },
        "enabledForDeployment": true,
        "enabledForDiskEncryption": true,
        "enabledForTemplateDeployment": true,
        "accessPolicies": [],
        "enableRbacAuthorization": true,
        "enableSoftDelete": true,
        "softDeleteRetentionInDays": 90
      }
    },
    {
      "condition": "[equals(parameters('eventBusTransport'), 'ServiceBus')]",
      "type": "Microsoft.ServiceBus/namespaces",
      "apiVersion": "2021-11-01",
      "name": "[format('{0}-{1}', parameters('name'), variables('collisionSuffix'))]",
      "location": "[parameters('location')]",
      "properties": {
        "disableLocalAuth": false,
        "zoneRedundant": false
      },
      "sku": {
        "name": "Basic"
      }
    },
    {
      "condition": "[equals(parameters('eventBusTransport'), 'QueueStorage')]",
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "2023-01-01",
      "name": "[format('{0}{1}', parameters('name'), variables('collisionSuffix'))]",
      "location": "[parameters('location')]",
      "kind": "StorageV2",
      "sku": {
        "name": "Standard_LRS"
      },
      "properties": {
        "accessTier": "Hot",
        "supportsHttpsTrafficOnly": true,
        "networkAcls": {
          "bypass": "AzureServices",
          "defaultAction": "Allow"
        }
      }
    },
    {
      "condition": "[not(variables('hasProvidedLogAnalyticsWorkspace'))]",
      "type": "Microsoft.OperationalInsights/workspaces",
      "apiVersion": "2022-10-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "name": "PerGB2018"
        },
        "retentionInDays": 30,
        "workspaceCapping": {
          "dailyQuotaGb": "[json('0.167')]"
        }
      }
    },
    {
      "condition": "[not(variables('hasProvidedAppEnvironment'))]",
      "type": "Microsoft.App/managedEnvironments",
      "apiVersion": "2023-05-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "properties": {
        "appLogsConfiguration": {
          "destination": "log-analytics",
          "logAnalyticsConfiguration": {
            "customerId": "[if(variables('hasProvidedLogAnalyticsWorkspace'), reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceId'), '/')[2], split(parameters('logAnalyticsWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceId'), '/')[8]), '2022-10-01').customerId, reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2022-10-01').customerId)]",
            "sharedKey": "[if(variables('hasProvidedLogAnalyticsWorkspace'), listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceId'), '/')[2], split(parameters('logAnalyticsWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceId'), '/')[8]), '2022-10-01').primarySharedKey, listKeys(resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')), '2022-10-01').primarySharedKey)]"
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/components",
      "apiVersion": "2020-02-02",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "kind": "web",
      "properties": {
        "Application_Type": "web",
        "WorkspaceResourceId": "[if(variables('hasProvidedLogAnalyticsWorkspace'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceId'), '/')[2], split(parameters('logAnalyticsWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', split(parameters('logAnalyticsWorkspaceId'), '/')[8]), resourceId('Microsoft.OperationalInsights/workspaces', parameters('name')))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('name'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', format('{0}-{1}', parameters('name'), variables('collisionSuffix')), 'project-and-token-0')]",
      "properties": {
        "contentType": "text/plain",
        "value": "[format('{0};{1}', parameters('azureDevOpsProjectUrl'), parameters('azureDevOpsProjectToken'))]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('{0}-{1}', parameters('name'), variables('collisionSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', format('{0}-{1}', parameters('name'), variables('collisionSuffix')), 'notifications-password')]",
      "properties": {
        "contentType": "text/plain",
        "value": "[parameters('notificationsPassword')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', format('{0}-{1}', parameters('name'), variables('collisionSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.App/containerApps",
      "apiVersion": "2023-05-01",
      "name": "[parameters('name')]",
      "location": "[parameters('location')]",
      "properties": {
        "managedEnvironmentId": "[if(variables('hasProvidedAppEnvironment'), parameters('appEnvironmentId'), resourceId('Microsoft.App/managedEnvironments', parameters('name')))]",
        "configuration": {
          "ingress": {
            "external": true,
            "targetPort": 8080,
            "traffic": [
              {
                "latestRevision": true,
                "weight": 100
              }
            ]
          },
          "secrets": "[concat(createArray(createObject('name', 'connection-strings-application-insights', 'value', reference(resourceId('Microsoft.Insights/components', parameters('name')), '2020-02-02').ConnectionString), createObject('name', 'project-and-token-0', 'keyVaultUrl', reference(resourceId('Microsoft.KeyVault/vaults/secrets', format('{0}-{1}', parameters('name'), variables('collisionSuffix')), 'project-and-token-0'), '2023-07-01').secretUri, 'identity', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))), createObject('name', 'notifications-password', 'keyVaultUrl', reference(resourceId('Microsoft.KeyVault/vaults/secrets', format('{0}-{1}', parameters('name'), variables('collisionSuffix')), 'notifications-password'), '2023-07-01').secretUri, 'identity', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')))), if(equals(parameters('eventBusTransport'), 'ServiceBus'), createArray(createObject('name', 'connection-strings-asb-scaler', 'value', listKeys(resourceId('Microsoft.ServiceBus/namespaces/AuthorizationRules', format('{0}-{1}', parameters('name'), variables('collisionSuffix')), 'RootManageSharedAccessKey'), '2021-11-01').primaryConnectionString)), createArray()), if(equals(parameters('eventBusTransport'), 'QueueStorage'), createArray(createObject('name', 'connection-strings-storage-scaler', 'value', join(createArray('DefaultEndpointsProtocol=https', format('AccountName={0}', format('{0}{1}', parameters('name'), variables('collisionSuffix'))), format('AccountKey={0}', listKeys(resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('name'), variables('collisionSuffix'))), '2023-01-01').keys[0].value), format('EndpointSuffix={0}', environment().suffixes.storage)), ';'))), createArray()))]"
        },
        "template": {
          "containers": [
            {
              "image": "[format('ghcr.io/mburumaxwell/azure-resources-cleaner:{0}', parameters('dockerImageTag'))]",
              "name": "azure-cleaner",
              "env": [
                {
                  "name": "AZURE_CLIENT_ID",
                  "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').clientId]"
                },
                {
                  "name": "ASPNETCORE_FORWARDEDHEADERS_ENABLED",
                  "value": "true"
                },
                {
                  "name": "GITHUB_SHA",
                  "value": "#{GITHUB_SHA}#"
                },
                {
                  "name": "GITHUB_REF_NAME",
                  "value": "#{GITHUB_REF_NAME}#"
                },
                {
                  "name": "APPLICATIONINSIGHTS_CONNECTION_STRING",
                  "secretRef": "connection-strings-application-insights"
                },
                {
                  "name": "Authentication__ServiceHooks__Credentials__vsts",
                  "secretRef": "notifications-password"
                },
                {
                  "name": "Cleaner__AzdoProjects__0",
                  "secretRef": "project-and-token-0"
                },
                {
                  "name": "EventBus__SelectedTransport",
                  "value": "[parameters('eventBusTransport')]"
                },
                {
                  "name": "EventBus__Transports__azure-service-bus__FullyQualifiedNamespace",
                  "value": "[if(equals(parameters('eventBusTransport'), 'ServiceBus'), split(split(reference(resourceId('Microsoft.ServiceBus/namespaces', format('{0}-{1}', parameters('name'), variables('collisionSuffix'))), '2021-11-01').serviceBusEndpoint, '/')[2], ':')[0], '')]"
                },
                {
                  "name": "EventBus__Transports__azure-queue-storage__ServiceUrl",
                  "value": "[if(equals(parameters('eventBusTransport'), 'QueueStorage'), reference(resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('name'), variables('collisionSuffix'))), '2023-01-01').primaryEndpoints.queue, '')]"
                }
              ],
              "resources": {
                "cpu": "[json('0.25')]",
                "memory": "0.5Gi"
              },
              "probes": [
                {
                  "type": "Liveness",
                  "httpGet": {
                    "port": 8080,
                    "path": "/liveness"
                  }
                },
                {
                  "type": "Readiness",
                  "httpGet": {
                    "port": 8080,
                    "path": "/health"
                  }
                }
              ]
            }
          ]
        }
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.App/managedEnvironments', parameters('name'))]",
        "[resourceId('Microsoft.Insights/components', parameters('name'))]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', format('{0}-{1}', parameters('name'), variables('collisionSuffix')), 'notifications-password')]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', format('{0}-{1}', parameters('name'), variables('collisionSuffix')), 'project-and-token-0')]",
        "[resourceId('Microsoft.ServiceBus/namespaces', format('{0}-{1}', parameters('name'), variables('collisionSuffix')))]",
        "[resourceId('Microsoft.Storage/storageAccounts', format('{0}{1}', parameters('name'), variables('collisionSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), 'KeyVaultAdministrator')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    },
    {
      "condition": "[equals(parameters('eventBusTransport'), 'ServiceBus')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), 'AzureServiceBusDataOwner')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '090c5cfd-751d-490a-894a-3ce6f1109419')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    },
    {
      "condition": "[equals(parameters('eventBusTransport'), 'QueueStorage')]",
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), 'StorageQueueDataContributor')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '974c5e8b-45b9-4653-ba55-5f855dd0fb88')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name')), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('name'))]"
      ]
    }
  ],
  "outputs": {
    "id": {
      "type": "string",
      "value": "[resourceId('Microsoft.App/containerApps', parameters('name'))]"
    },
    "fqdn": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn]"
    },
    "notificationUrl": {
      "type": "string",
      "value": "[format('https://{0}/webhooks/azure', reference(resourceId('Microsoft.App/containerApps', parameters('name')), '2023-05-01').configuration.ingress.fqdn)]"
    }
  }
}