name: Build

on:
  push:
    branches: [main]
    tags: ['*']
    paths-ignore:
    - .devcontainer/**
    - .vscode/**
    - docs/**
    - README.md
    - LICENSE
    - '**/README.md'
    - .github/**
    - '!.github/workflows/build.yml'
  pull_request:
    branches: [main]
    paths-ignore:
    - .devcontainer/**
    - .vscode/**
    - docs/**
    - README.md
    - LICENSE
    - '**/README.md'
    - .github/**
    - '!.github/workflows/build.yml'
  workflow_dispatch:

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}

  GITHUB_SHA: ${{ github.sha }} # not discovered by default
  GITHUB_REF_NAME: ${{ github.ref_name }} # not discovered by default

  DOCKER_TAGS: '' # helps with intellisense

jobs:
  Build:
    runs-on: ubuntu-latest
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      IMAGE_NAME: 'azure-resources-cleaner'

    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
      cancel-in-progress: true

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Required for GitVersion

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4

    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3
      with:
        versionSpec: '6.0.x'

    - name: Determine Version
      uses: gittools/actions/gitversion/execute@v3
      id: gitversion
      with:
        useConfigFile: true

    - name: Restore
      run: dotnet restore

    - name: Build
      run: >
        dotnet build
        --configuration Release
        --no-restore
        -p:VersionPrefix=${{ steps.gitversion.outputs.fullSemVer }}

    - name: Test
      run: >
        dotnet test
        --configuration Release
        --no-build
        --collect "Code coverage"

    - name: Publish
      run: >
        dotnet publish
        ${{ github.workspace }}/Tingle.AzureCleaner/Tingle.AzureCleaner.csproj
        --configuration Release
        --output ${{ github.workspace }}/drop/Tingle.AzureCleaner

    - name: Pack
      run: >
        dotnet pack
        --no-build
        --configuration Release
        --output ${{ github.workspace }}/drop
        -p:PackageVersion=${{ steps.gitversion.outputs.fullSemVer }}

    - name: Replace tokens
      uses: cschleiden/replace-tokens@v1
      with:
        files: '["${{ github.workspace }}/main.bicep"]'

    - name: Build bicep file
      uses: azure/cli@v2
      with:
        inlineScript: |
          tdnf install -y icu
          tdnf install -y jq
          cp ${{ github.workspace }}/main.bicep ${{ github.workspace }}/drop/main.bicep && \
          az bicep build --file main.bicep --outfile ${{ github.workspace }}/drop/main.json

    - name: Upload Artifact (drop)
      uses: actions/upload-artifact@v4
      with:
        path: ${{ github.workspace }}/drop/*
        name: drop
        retention-days: 1

    - name: Create deploy folder
      run: |
        mkdir -p deploy
        cp ${{ github.workspace }}/main.bicep ${{ github.workspace }}/deploy/main.bicep
        cp ${{ github.workspace }}/main.parameters.json ${{ github.workspace }}/deploy/main.parameters.json

    - name: Replace tokens in deploy folder
      uses: cschleiden/replace-tokens@v1
      with:
        files: '["${{ github.workspace }}/deploy/main.parameters.json"]'
      env:
        DOCKER_IMAGE_TAG: ${{ steps.gitversion.outputs.fullSemVer }}
        NOTIFICATION_PASSWORD: ${{ secrets.NOTIFICATION_PASSWORD }}
        CLEANER_PROJECT_TOKEN: ${{ secrets.CLEANER_PROJECT_TOKEN }}

    - name: Upload Artifact (deploy)
      uses: actions/upload-artifact@v4
      with:
        path: deploy
        name: deploy
        retention-days: 1

    - name: Pull Docker base image & warm Docker cache
      run: docker pull "ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest"
      continue-on-error: true

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    # Generate tags to use in multi-arch build.
    # This is because we cannot build multi-arch images and load them for later pushing.
    # Different tags are pushed depending on the current ref.
    - name: Compute Docker tags
      id: docker-tags-generator
      uses: actions/github-script@v7
      with:
        script: |
          const { ref } = context;
          const { owner: repoOwner } = context.repo;
          const {
            IMAGE_NAME: imageName,
            SHORT_SHA: shortSha,
            FULL_SEMVER: fullSemVer,
            MAJOR: major,
            MINOR: minor,
          } = process.env;

          let tags = [`ghcr.io/${repoOwner}/${imageName}:${fullSemVer}`];
          if (ref === 'refs/heads/main' || ref.startsWith('refs/tags/')) {
            tags.push(`ghcr.io/${repoOwner}/${imageName}:latest`);
            tags.push(`ghcr.io/${repoOwner}/${imageName}:${shortSha}`);
          }
          if (ref.startsWith('refs/tags/')) {
            tags.push(`ghcr.io/${repoOwner}/${imageName}:${major}.${minor}`);
            tags.push(`ghcr.io/${repoOwner}/${imageName}:${major}`);
          }

          // result is list or CSV
          core.info(`Computed tags: "${tags.join(',')}"`);
          core.exportVariable('DOCKER_TAGS', tags.join(','));
      env:
        IMAGE_NAME: ${{ env.IMAGE_NAME }}
        SHORT_SHA: ${{ steps.gitversion.outputs.shortSha }}
        FULL_SEMVER: ${{ steps.gitversion.outputs.fullSemVer }}
        MAJOR: ${{ steps.gitversion.outputs.major }}
        MINOR: ${{ steps.gitversion.outputs.minor }}

    - name: Log into registry
      if: ${{ !startsWith(github.ref, 'refs/pull') }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push multi-arch image
      uses: docker/build-push-action@v6
      with:
        context: ${{ github.workspace }}/drop/Tingle.AzureCleaner
        file: Tingle.AzureCleaner/Dockerfile.CI
        platforms: linux/amd64,linux/arm64
        push: ${{ !startsWith(github.ref, 'refs/pull') }}
        cache-from: type=registry,ref=ghcr.io/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:latest
        cache-to: type=inline # sets BUILDKIT_INLINE_CACHE=1
        tags: ${{ env.DOCKER_TAGS }}
        labels: |
          org.opencontainers.image.description="Cleanup tool for Azure resources for reviews"
          org.opencontainers.image.source=${{ github.repository }}
          org.opencontainers.image.version=${{ steps.gitversion.outputs.fullSemVer }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          com.github.image.run.id=${{ github.run_id }}
          com.github.image.run.number=${{ github.run_number }}
          com.github.image.job.id=${{ github.job }}
          com.github.image.source.sha=${{ github.sha }}
          com.github.image.source.branch=${{ github.ref }}

    - name: Upload Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: ncipollo/release-action@v1
      with:
        artifacts: >
          ${{ github.workspace }}/drop/main.bicep,
          ${{ github.workspace }}/drop/main.json
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: true
        allowUpdates: true

  # Deploy:
  #   runs-on: ubuntu-latest
  #   needs: Build
  #   if: ${{ github.actor != 'dependabot[bot]' && ((github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags')) }}

  #   concurrency:
  #     group: ${{ github.workflow }}-${{ github.ref }}
  #     cancel-in-progress: false # wait for previous runs to complete

  #   steps:
  #   - name: Download Artifact
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: deploy
  #       path: ${{ github.workspace }}/deploy

  #   - name: Azure Login
  #     uses: azure/login@v2
  #     with:
  #       creds: ${{ secrets.AZURE_CREDENTIALS }}

  #   - name: Deploy
  #     uses: azure/arm-deploy@v2
  #     with:
  #       subscriptionId: ${{ env.AZURE_SUBSCRIPTION_ID }}
  #       resourceGroupName: ${{ env.AZURE_RESOURCE_GROUP }}
  #       template: '${{ github.workspace }}/deploy/main.bicep'
  #       parameters: '${{ github.workspace }}/deploy/main.parameters.json'
  #       scope: 'resourcegroup'

  GitHubPackages:
    runs-on: ubuntu-latest
    name: Publish (GitHub Packages)
    needs: Build
    if: ${{ github.actor != 'dependabot[bot]' && ((github.ref == 'refs/heads/main') || startsWith(github.ref, 'refs/tags')) }}

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: drop
        path: ${{ github.workspace }}/drop

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.x'
        source-url: https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to nuget.pkg.github.com
      run: >
        dotnet nuget push "${{ github.workspace }}/drop/*"
        -k ${{ secrets.GITHUB_TOKEN }}
        --skip-duplicate

  NugetOrg:
    runs-on: ubuntu-latest
    name: Publish (Nuget.org)
    needs: Build
    if: ${{ github.actor != 'dependabot[bot]' && startsWith(github.ref, 'refs/tags') }}

    steps:
    - uses: actions/download-artifact@v4
      with:
        name: drop
        path: ${{ github.workspace }}/drop

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 9.x
        source-url: https://api.nuget.org/v3/index.json
      env:
        NUGET_AUTH_TOKEN: ${{ secrets.NUGET_API_KEY }}

    - name: Publish to NuGet.org
      if: startsWith(github.ref, 'refs/tags/')
      run: >
        dotnet nuget push "${{ github.workspace }}/drop/*"
        -k ${{ secrets.NUGET_API_KEY }}
        --skip-duplicate
